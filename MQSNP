-- MoQleShon Network Protocol API by Liltine & Eiryna v1.0

local R_busy = false
local netside = "right"
local messageTable = {}

function CheckOnline()
	if rednet.isOpen(netside) then
		return true
	else
		return false
	end
end

function Send(id, acanal, amsg)
	local MsgLoop = false
	local ten =  0
	local MsgAkn = false
		
	while (MsgLoop == false) do
		rednet.send(id,"INC_MSG")
		local S_id, S_msg, S_dist = rednet.receive()
		if S_id == id then
			if S_msg == "LIS_MSG" then
				rednet.send(id, textutils.serialize({canal=acanal, msg=amsg}))
				MsgLoop = true
			elseif S_msg == "BUSY" then
				ten = ten + 1
				if ten == 5 then 
					return false
				end
				os.sleep(1)
			else
				return false
			end
		else
			rednet.send(S_id, "BUSY")
		end
	end
	while MsgLoop do
		S_id, S_msg, S_dist = rednet.receive()
		if S_id == id then
			if S_msg == "RCV_OK" then
				MsgAkn = true
			        MsgLoop = false
			end
		else
			rednet.send(S_id,"BUSY")
		end
	end
	return MsgAkn
end

function Receive()
	local loop = true
		local RS_id, RS_msg, RS_dict = rednet.receive()
		if RS_msg == "INC_MSG" then
			rednet.send(RS_id, "LIS_MSG")
			while loop do
				local R_id, R_msg, R_dist = rednet.receive()
				    if (R_id==RS_id) then
							rednet.send(R_id, "RCV_OK")
							tablemsg=textutils.unserialize(R_msg)
							loop = false
							table.insert (messageTable , textutils.serialize({id=R_id,canal=tablemsg["canal"],msg=tablemsg["canal"]}))	
					else
						rednet.send(R_id, "BUSY")
					end
			end
		else
		--todo whois response
		end
end

function getMessage()
	msg= table.remove(messageTable, 1)
	if not (msg == nil) then 
		return textutils.unserialize(msg)
	else
		return nil
	end
end

function WhoIs(Name)
	local WISM = {msg = "WHOIS", n=Name, typ="" }
	local S_msg = textutils.serialize(WISM)
	rednet.broadcast(S_msg)
end